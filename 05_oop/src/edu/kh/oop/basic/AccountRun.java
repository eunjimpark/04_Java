package edu.kh.oop.basic;

public class AccountRun {
	
	public static void main(String[] args) {
		
		
		//Account 객체 생성
		Account a1 = new Account();

		
		//a1.accountNumber = "1";
		//a1.name = "홍길동";
		//a1.balance;           직접접근안됨
		
		
		//간접 접근방법
		a1.setName("신형만");
		
		//간저 접근 기능을 이용해서 객체의 속성을 얻어와 출력
	
		
		String name1 = a1.getName();
		System.out.println(name1);
		
		
		a1.setAccountNumber("1234-56-7890");
		a1.setPassword("7890");
		
		Account a2 = new Account();
		a2.setName("신짱아");
		a2.setAccountNumber("111-222-333");
		a2.setPassword("7777");
		
		// 각 계좌에 입금
		a1.deposit(1000000L);
		a1.deposit(2345L);
		
		a2.deposit(50000L);
		a2.deposit(30000L);
		
		//각 계좌에서 출금 
		a1.withdraw("1324",2000000); //비번틀림
		a1.withdraw("7890",2000000); //잔액부족
		a1.withdraw("7890",50000);  //출금성공
		
	}

}


/*
현실 객체 :자신의 속성(값, data)과 기능(동작,행동)이 다른 것들 과 구분되어 식별 가능한 것

객체 지향 언어 : 현실 세계는 사물이나 개념처럼 독립되고 구분되는 각각의 객체로 이루어져 있으며,
발생하는 모든 사건들은 객체간의 상호작용이다.
이 개념을 컴퓨터로 옮겨 놓아 만들어낸 것이 객체지향 언어이다.

자바 객체 :  클래스에 정의된 내용대로 new 연산자를 통해 메모리 영역에 생성된 것

lass :객체의 특성(속성, 기능)에 대한 정의를 한 것
new 연산자 :

추상화 :유연성을 확보하기 위해 구체적인 것은 제거한다는 의미
작성하려는 클래스의 속성과 기능 중
프로그램에서 필요한 공통점을 추출하고, 불필요한 부분을 제거하는 과정

캡슐화 :  추상화를 통해 정리된 데이터들과 기능을 하나로 묶어 관리하는 기법
클래스의 가장 중요한 목적인 데이터의 직접 접근제한을 원칙으로 하여
클래스 외부에서 데이터의 직접적인 접근을 막고,
대신 간접적으로 데이터에 접근할 수 메소드를 클래스 내부에 작성하는 방법

캡슐화 원칙 : 1. 클래스의 멤버 변수에 대한 접근 권한은 private을 원칙으로 한다.
2. 클래스의 멤버 변수에 대한 연산처리를 목적으로 하는 멤버 메소드는 클래스 내부에 작성한다.
3. 멤버 메소드는 클래스 밖에서 접근할 수 있도록 public으로 설정한다.

 1) private  
 2) 간접 접근 방법 작성

heap 영역 할당 시 변수/요소가 빈칸으로 있을 수 없다!
-> 기본 값이 대입되어 있음
*/

